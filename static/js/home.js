// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var App, DayView, HomeModel, HomeView, PlanDayView, PlanView, PlannerView, TaskView, WeekView, json_data, weekdays;
    json_data = {};
    $.ajax({
      url: '/home_data',
      async: false,
      success: function(data) {
        return json_data = data;
      }
    });
    console.log(json_data);
    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    HomeModel = Backbone.Model.extend({
      initialize: function() {
        return console.log("dashboard model initialized");
      }
    });
    HomeView = Backbone.View.extend({
      el: '#home',
      initialize: function() {
        this.model = new HomeModel();
        this.thisWeek = new WeekView({
          which: 'this',
          model: this.model
        });
        this.nextWeek = new WeekView({
          which: 'next',
          model: this.model
        });
        return this.planner = new PlannerView({
          model: this.model
        });
      }
    });
    WeekView = Backbone.View.extend({
      initialize: function() {
        var day, i, _results, _results1;
        if (this.options.which === 'this') {
          this.el = '#this_week';
          i = 0;
          _results = [];
          while (i < 7) {
            day = new DayView({
              which: i,
              model: this.model
            });
            $(this.el).append(day.render().el);
            _results.push(i += 1);
          }
          return _results;
        } else if (this.options.which === 'next') {
          this.el = '#next_week';
          i = 7;
          _results1 = [];
          while (i < 14) {
            day = new DayView({
              which: i,
              model: this.model
            });
            $(this.el).append(day.render().el);
            _results1.push(i += 1);
          }
          return _results1;
        } else {
          return console.log('You done goofed, son.');
        }
      }
    });
    PlannerView = Backbone.View.extend({
      el: '#planner',
      initialize: function() {
        var i, planday, _results;
        this.plandays = [];
        i = 0;
        _results = [];
        while (i < 7) {
          planday = new PlanDayView({
            which: i,
            model: this.model
          });
          this.plandays.push(planday);
          _results.push(i += 1);
        }
        return _results;
      },
      render: function() {}
    });
    DayView = Backbone.View.extend({
      template: _.template($('#day_template').html()),
      events: {
        "click .herp": "show_inputter",
        "click .input_cover": "swap_back",
        "keypress .checker": "keypress_check"
      },
      initialize: function() {
        var f_or_s, task_detail, tasks_list, _i, _len, _results;
        this.i = this.options.which;
        this.weekday = weekdays[this.i % 7];
        if (this.i < 7) {
          f_or_s = "First";
        } else {
          f_or_s = "Second";
        }
        tasks_list = json_data.tasks[f_or_s][this.weekday];
        this.tasks = [];
        _results = [];
        for (_i = 0, _len = tasks_list.length; _i < _len; _i++) {
          task_detail = tasks_list[_i];
          _results.push(this.tasks.push(new TaskView({
            model: this.model,
            detail: task_detail
          })));
        }
        return _results;
      },
      render: function() {
        var task, _i, _len, _ref;
        this.$el.addClass('weekday');
        this.$el.html(this.template({
          day: json_data.two_weeks[this.i]
        }));
        _ref = this.tasks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          task = _ref[_i];
          $(this.$el.children()[0]).after(task.render());
        }
        return this;
      },
      show_inputter: function() {
        var cover, herp, inputter, this_el;
        this_el = $(event.currentTarget);
        herp = $(this_el.children()[this_el.children().length - 3]);
        inputter = $(this_el.children()[this_el.children().length - 2]);
        cover = $(this_el.children()[this_el.children().length - 1]);
        herp.hide();
        inputter.show();
        return cover.show();
      },
      keypress_check: function(e) {
        if (e.keyCode === 13) {
          return this.swap_back();
        }
      },
      swap_back: function() {
        var cover, data, herp, inputter, new_task, task_date, task_detail, task_duration, task_name, this_el;
        this_el = $(event.currentTarget);
        herp = $(this_el.children()[this_el.children().length - 3]);
        inputter = $(this_el.children()[this_el.children().length - 2]);
        cover = $(this_el.children()[this_el.children().length - 1]);
        task_name = inputter.children()[0].value;
        task_duration = inputter.children()[2].value;
        task_date = this_el.children()[0].innerHTML;
        if (task_name === '') {
          herp.show();
          inputter.hide();
          return cover.hide();
        } else {
          if (task_duration === '') {
            task_duration = '1 hour';
          }
          data = {
            name: task_name,
            date: task_date,
            length: task_duration
          };
          task_detail = {
            completed: false,
            id: -1,
            name: task_name
          };
          new_task = new TaskView({
            model: this.model,
            detail: task_detail
          });
          this.tasks.push(new_task);
          herp.before(new_task.render());
          $.post("/addtask", data, function(d, st, xr) {
            this_el.children()[this_el.children().length - 4].setAttribute('id', 'task_' + d);
            return console.log("Done");
          });
          herp.show();
          inputter.hide();
          $(inputter.children()[0]).val('');
          $(inputter.children()[2]).val('');
          return cover.hide();
        }
      }
    });
    PlanDayView = Backbone.View.extend({
      template: _.template($('#planday_template').html()),
      initialize: function() {
        var i, plan, plan_detail, weekday, _i, _len, _ref;
        i = this.options.which;
        this.plans = [];
        weekday = weekdays[i];
        _ref = json_data.planned[weekday];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plan_detail = _ref[_i];
          plan = new PlanView({
            model: this.model,
            detail: plan_detail
          });
          this.plans.push(plan);
        }
        return this.render(i);
      },
      render: function(i) {
        $('#planner').append(this.template({
          day: json_data.two_weeks[i]
        }));
        return this;
      }
    });
    TaskView = Backbone.View.extend({
      template: _.template($("#task_template").html()),
      events: {
        "click .toggle": "task_checked",
        "dblclick .task_name": "edit_name",
        "click .input_cover": "swap_back",
        "keypress .edit": "check_key",
        "click .delete_task": "delete"
      },
      initialize: function() {
        return this.details = this.options.detail;
      },
      render: function() {
        var completed;
        this.$el.addClass('task');
        this.$el.attr('id', 'task_' + this.details.id);
        if (this.details.completed === true) {
          completed = 'checked';
        } else {
          completed = '';
        }
        this.$el.html(this.template({
          checked: completed,
          done: this.details.completed,
          name: this.details.name
        }));
        this.delegateEvents();
        return this.$el;
      },
      task_checked: function() {
        var checkbox, checked, classList, data, id;
        checkbox = $($(event.currentTarget).children()[1]);
        classList = checkbox.attr('class').split(/\s+/);
        checked = false;
        $.each(classList, function(index, item) {
          if (item === 'checked') {
            return checked = true;
          }
        });
        id = event.currentTarget.id;
        if (!checked) {
          checkbox.addClass('checked');
          data = {
            task_id: id
          };
          return $.post("/check", data, function(d, st, xr) {
            return console.log("Marked as complete");
          });
        } else {
          checkbox.removeClass('checked');
          data = {
            task_id: id
          };
          return $.post("/uncheck", data, function(d, st, xr) {
            return console.log("Marked as complete");
          });
        }
      },
      edit_name: function() {
        var edit_field, input_cover, task_name, this_el;
        this_el = $(event.currentTarget);
        task_name = $(this_el.children()[1]);
        edit_field = $(this_el.children()[2]);
        input_cover = $(this_el.children()[3]);
        if (edit_field.css('dispay', 'none')) {
          task_name.hide();
          edit_field.show();
          input_cover.show();
          return edit_field.focus();
        }
      },
      check_key: function(e) {
        if (e.keyCode === 13) {
          return this.swap_back();
        }
      },
      swap_back: function() {
        var data, edit_field, ho, id, input_cover, task_name, this_el;
        this_el = $(event.currentTarget);
        ho = this_el.children();
        task_name = $(ho[1]);
        edit_field = $(ho[2]);
        input_cover = $(ho[3]);
        if (edit_field.val() === ho[1].innerHTML) {
          task_name.show();
          edit_field.hide();
          return input_cover.hide();
        } else {
          id = event.currentTarget.id;
          data = {
            task_id: id,
            new_name: edit_field.val()
          };
          $.post("/update", data, function(d, st, xr) {
            return console.log("Task updated");
          });
          task_name.text(edit_field.val());
          task_name.show();
          edit_field.hide();
          return input_cover.hide();
        }
      },
      "delete": function() {
        var data, id;
        id = event.currentTarget.id;
        data = {
          task_id: id
        };
        $.post("/delete", data, function(d, st, xr) {
          return console.log("Deleted");
        });
        return event.currentTarget.remove();
      }
    });
    PlanView = Backbone.View.extend({
      initialize: function() {},
      toggleDone: function() {},
      move: function() {}
    });
    return App = new HomeView();
  });

}).call(this);
